可靠性高并发IO测试程序
========================

=== 并发级别扫描测试 ===

--- BENCHMARK_DATA_START ---
{"benchmark_results": [
测试 1 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
  {"threads": 1,
   "io_uring_samples": [2811.4, 2722.7, 3055.5, 3043.4, 2882.7],
   "normal_io_samples": [3533.6, 3317.4, 3232.5, 2948.5, 3496.3],
   "io_uring_avg": 2903.1,
   "normal_io_avg": 3305.6,
   "speedup": 0.878}测试 2 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 2,
   "io_uring_samples": [3839.2, 3888.3, 3851.5, 3897.1, 3801.6],
   "normal_io_samples": [2554.2, 6383.3, 628.3, 5866.1, 6360.1],
   "io_uring_avg": 3855.5,
   "normal_io_avg": 4358.4,
   "speedup": 0.885}测试 4 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 4,
   "io_uring_samples": [7613.8, 5169.4, 5522.1, 5426.5, 5313.6],
   "normal_io_samples": [12760.0, 12392.3, 11485.7, 5004.3, 922.4],
   "io_uring_avg": 5809.1,
   "normal_io_avg": 8512.9,
   "speedup": 0.682}测试 6 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 6,
   "io_uring_samples": [6269.2, 6345.8, 6655.6, 6353.0, 5219.0],
   "normal_io_samples": [1363.4, 1374.5, 19222.1, 1712.2, 18464.9],
   "io_uring_avg": 6168.5,
   "normal_io_avg": 8427.5,
   "speedup": 0.732}测试 8 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 8,
   "io_uring_samples": [7264.7, 7247.8, 7166.9, 1501.7, 1511.4],
   "normal_io_samples": [21961.1, 21913.0, 20699.6, 2593.0, 1842.9],
   "io_uring_avg": 4938.5,
   "normal_io_avg": 13801.9,
   "speedup": 0.358}测试 12 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 12,
   "io_uring_samples": [7907.6, 7584.7, 2122.2, 8430.5, 8870.2],
   "normal_io_samples": [2747.1, 5323.7, 21985.3, 23725.7, 26824.0],
   "io_uring_avg": 6983.0,
   "normal_io_avg": 16121.2,
   "speedup": 0.433}测试 16 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 16,
   "io_uring_samples": [1963.9, 2664.0, 10487.4, 9703.0, 4408.2],
   "normal_io_samples": [22629.6, 22812.2, 22528.2, 22138.0, 22222.8],
   "io_uring_avg": 5845.3,
   "normal_io_avg": 22466.2,
   "speedup": 0.260}测试 20 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 20,
   "io_uring_samples": [10002.6, 9605.6, 2076.0, 9708.5, 2201.2],
   "normal_io_samples": [25008.8, 24734.1, 21825.0, 25890.6, 20995.2],
   "io_uring_avg": 6718.8,
   "normal_io_avg": 23690.7,
   "speedup": 0.284}测试 24 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 24,
   "io_uring_samples": [4147.4, 10487.9, 7716.9, 10247.2, 9387.6],
   "normal_io_samples": [21056.0, 27632.6, 28081.3, 22319.4, 26226.6],
   "io_uring_avg": 8397.4,
   "normal_io_avg": 25063.2,
   "speedup": 0.335}测试 32 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 32,
   "io_uring_samples": [11071.0, 6093.2, 10811.9, 11064.7, 10757.0],
   "normal_io_samples": [26992.4, 22486.8, 27424.5, 25574.2, 29292.2],
   "io_uring_avg": 9959.5,
   "normal_io_avg": 26354.0,
   "speedup": 0.378}测试 40 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 40,
   "io_uring_samples": [11281.8, 10629.2, 7144.0, 5295.8, 10812.9],
   "normal_io_samples": [31651.6, 26151.7, 30424.3, 31001.0, 28995.2],
   "io_uring_avg": 9032.7,
   "normal_io_avg": 29644.7,
   "speedup": 0.305}测试 48 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 48,
   "io_uring_samples": [11380.9, 9534.3, 6906.7, 10290.8, 10983.3],
   "normal_io_samples": [24332.1, 26638.5, 30190.6, 30176.2, 30984.9],
   "io_uring_avg": 9819.2,
   "normal_io_avg": 28464.5,
   "speedup": 0.345}测试 56 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 56,
   "io_uring_samples": [9504.2, 9796.6, 12011.4, 10552.8, 10126.4],
   "normal_io_samples": [30651.3, 29896.0, 26752.8, 29073.1, 29064.6],
   "io_uring_avg": 10398.3,
   "normal_io_avg": 29087.6,
   "speedup": 0.357}测试 64 线程...
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
使用动态批量大小: 32 (文件大小: 128KB)
,
  {"threads": 64,
   "io_uring_samples": [8793.3, 5342.5, 4522.9, 10500.0, 11822.8],
   "normal_io_samples": [26103.5, 26984.2, 26536.2, 30242.3, 26491.2],
   "io_uring_avg": 8196.3,
   "normal_io_avg": 27271.5,
   "speedup": 0.301}
]}
--- BENCHMARK_DATA_END ---
